import streamlit as st
import pickle
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.impute import KNNImputer
from sklearn.preprocessing import LabelEncoder
from scipy import stats
import streamlit as st
import time

# Configure page - MUST BE FIRST STREAMLIT COMMAND
st.set_page_config(
    page_title="Prediction App",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better UI
def set_custom_style():
    st.markdown("""
    <style>
    .main-header {color:#1E88E5; font-family:'Helvetica Neue', Helvetica, sans-serif;}
    .sub-header {color:#0D47A1; font-family:'Helvetica Neue', Helvetica, sans-serif;}
    .highlight {background-color:#f0f7ff; padding:15px; border-radius:5px; border-left:5px solid #1E88E5;}
    .card {background-color:white; padding:20px; border-radius:10px; box-shadow:0 2px 5px rgba(0,0,0,0.1);}
    .button {background-color:#1E88E5 !important;}
    </style>
    """, unsafe_allow_html=True)

# PAGES
def development_ml():
    st.markdown("""
    <style>
    .main-header {
        color: #1E88E5;
        text-align: center;
        padding: 20px 0;
        font-size: 2.5rem;
        border-bottom: 2px solid #1E88E5;
        margin-bottom: 30px;
    }
    .highlight {
        background-color: #f5f7ff;
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #1E88E5;
        margin-bottom: 20px;
    }
    .card {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-top: 20px;
        margin-bottom: 20px;
    }
    .sub-header {
        color: #1E88E5;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 10px;
    }
    .metric-highlight {
        font-weight: bold;
        color: #1E88E5;
        font-size: 1.2rem;
        background-color: #e3f2fd;
        padding: 5px 10px;
        border-radius: 5px;
    }
    .metric-card {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #e0e0e0;
        margin: 5px 0;
    }
    .metric-title {
        font-size: 0.9rem;
        color: #666;
    }
    .metric-value {
        font-size: 1.4rem;
        font-weight: bold;
        color: #333;
    }
    .r2-score {
        background-color: #e3f2fd;
        border: 2px solid #1E88E5;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        animation: pulse 2s infinite;
    }
    .workflow-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 30px 0;
        padding: 20px;
        background-color: #EBF5FB;
        border-radius: 10px;
    }
    .workflow-step {
        text-align: center;
        width: 120px;
    }
    .workflow-icon {
        font-size: 24px;
        background-color: #AED6F1;
        width: 60px;
        height: 60px;
        line-height: 60px;
        border-radius: 50%;
        margin: 0 auto 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .workflow-arrow {
        color: #3498DB;
        font-size: 24px;
        font-weight: bold;
    }
    .workflow-text {
        font-size: 16px;
        font-weight: 500;
    }
    .code-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 5px;
        margin: 20px 0;
    }
    .highlights-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin: 30px 0;
    }
    .highlight-box {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        border-top: 4px solid #3498DB;
    }
    
    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(30, 136, 229, 0.4);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(30, 136, 229, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(30, 136, 229, 0);
        }
    }
    </style>
    """, unsafe_allow_html=True)
    

    st.markdown("<h1 class='main-header'>Development Machine Learning</h1>", unsafe_allow_html=True)

    st.markdown("""
    <div class="highlight">
        <h3>XGBoost ‡πÅ‡∏•‡∏∞ Stacking Models</h3>
        <p>‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å:</p>
        <ul>
            <li>RAM (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)</li>
            <li>Storage (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)</li>
            <li>Processor Speed (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•)</li>
        </ul>
        <p>‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</p>
    </div>
    """, unsafe_allow_html=True)

    # Model performance metrics
    st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning")

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown("""
        <div class="metric-card">
            <p class="metric-title">Mean Squared Error (MSE)</p>
            <p class="metric-value">4920.67</p>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown("""
        <div class="metric-card">
            <p class="metric-title">Root Mean Squared Error (RMSE)</p>
            <p class="metric-value">70.15</p>
        </div>
        """, unsafe_allow_html=True)
    with col3:
        st.markdown("""
        <div class="metric-card">
            <p class="metric-title">Mean Absolute Error (MAE)</p>
            <p class="metric-value">18.18</p>
        </div>
        """, unsafe_allow_html=True)
    with col4:
        st.markdown("""
        <div class="r2-score">
            <p class="metric-title">R¬≤ Score</p>
            <p class="metric-value">0.9927</p>
            <p style="font-size: 0.8rem; color: #1E88E5;">(‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 99.27%)</p>
        </div>
        """, unsafe_allow_html=True)

    # Add visualization of metrics
    st.markdown("""
    <div class="card">
        <h4 class='sub-header'>‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning</h4>
        <p>‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ <span class="metric-highlight">R¬≤ ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0.9927</span> ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ñ‡∏∂‡∏á 99.27%</p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("<h1 class='main-header'>Data Preparation</h1>", unsafe_allow_html=True)
    
    # Introduction
    st.markdown("""
    <div class="step-card">
        <p style="font-size: 18px;">‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ</p>
    </div>
    """, unsafe_allow_html=True)

        # Workflow visualization
    st.markdown("""
    <div class="workflow-container">
        <div class="workflow-step">
            <div class="workflow-icon">üì•</div>
            <div class="workflow-text">‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">üßπ</div>
            <div class="workflow-text">‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">üîÑ</div>
            <div class="workflow-text">‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">‚úÇÔ∏è</div>
            <div class="workflow-text">Feature En</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">üöÄ</div>
            <div class="workflow-text">‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Key steps detailed
    st.markdown("""<div class="highlights-container">""", unsafe_allow_html=True)
    
    # Step 1
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">1</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)</h3>
        </div>
        <p class="step-desc">üü™ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Storage type" ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Unknown"</p>
        <p class="step-desc">üü™ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Screen" ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô</p>
        <p class="step-desc">üü™ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "GPU" ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "No GPU"</p>
        <p class="step-desc">üü™ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ KNN Imputation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Storage" ‡πÅ‡∏•‡∏∞ "Screen" ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Step 2
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">2</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Outliers</h3>
        </div>
        <p class="step-desc">üü™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ Z-score ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤ Outliers</p>
        <p class="step-desc">üü™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ Z-score ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Z-score ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏à‡∏±‡∏î Outliers</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Step 3
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">3</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Categorical ‡πÄ‡∏õ‡πá‡∏ô Numerical</h3>
        </div>
        <p class="step-desc">üü™ ‡πÉ‡∏ä‡πâ LabelEncoder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• categorical ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Brand", "CPU", "GPU", "Storage type", ‡πÅ‡∏•‡∏∞ "Touch" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Step 4
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">4</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Feature Engineering</h3>
        </div>
        <p class="step-desc">üü™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà "Price_per_GB" ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏</p>
        <p class="step-desc">üü™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà "Screen_to_Storage_Ratio" ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏</p>
    </div>
    """, unsafe_allow_html=True)

    # Step 5
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">5</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Training)</h3>
        </div>
        <p class="step-desc">üü™ ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏±‡πâ‡∏ô ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ R2 score ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏∑‡∏≠ 0.9927 ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ
    ‡∏Ñ‡πà‡∏≤ Metric ‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡πÄ‡∏ä‡πà‡∏ô Mean Squared Error (MSE), Root Mean Squared Error (RMSE), ‡πÅ‡∏•‡∏∞ Mean Absolute Error (MAE) ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å</p>
    </div>
    """, unsafe_allow_html=True)

    # Step 6
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">6</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Selection)</h3>
        </div>
        <p class="step-desc">üü™ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏≠ XGBoost ‡πÅ‡∏•‡∏∞ Stacking models ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô</p>
    </div>
    """, unsafe_allow_html=True)

     # Step 7
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">7</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Evaluation)</h3>
        </div>
        <p class="step-desc">üü™ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Metric ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô MSE, RMSE, MAE, ‡πÅ‡∏•‡∏∞ R¬≤ score ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•</p>
    </div>
    """, unsafe_allow_html=True)
    
    
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    
    # Summary
    st.markdown("""
    <div class="step-card" style="background-color: #EBF5FB; border-left: 5px solid #2E86C1;">
        <h3 style="color: #2874A6;">‡∏™‡∏£‡∏∏‡∏õ</h3>
        <p>‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÅ‡∏•‡∏∞ Neural Network ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
    </div>
    """, unsafe_allow_html=True)
    

    # Code examples
    with st.expander("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Machine Learning"):
        st.markdown("""<div class="code-section">""", unsafe_allow_html=True)
        code_ml = '''
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_csv("laptops.csv")

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
df['Storage type'] = df['Storage type'].fillna('Unknown')
df['Screen'] = df['Screen'].fillna(df['Screen'].median())
df['GPU'] = df['GPU'].fillna('No GPU')

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ KNN Imputation
imputer = KNNImputer(n_neighbors=5)
df[['Storage', 'Screen']] = imputer.fit_transform(df[['Storage', 'Screen']])

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Outliers
z_scores = np.abs(stats.zscore(df.select_dtypes(include=[np.number])))
df_clean = df[(z_scores < 3).all(axis=1)].copy()

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
label_encoders = {}
for col in ["Brand", "CPU", "GPU", "Storage type", "Touch"]:
    le = LabelEncoder()
    df_clean[col] = le.fit_transform(df_clean[col].astype(str))
    label_encoders[col] = le

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
df_clean['Price_per_GB'] = df_clean['Final Price'] / df_clean['Storage']
df_clean['Screen_to_Storage_Ratio'] = df_clean['Screen'] / df_clean['Storage']
'''
        st.code(code_ml, language='python')
        st.markdown("""</div>""", unsafe_allow_html=True)
    
def development_nn():
    st.markdown("""
    <style>
    .main-header {
        color: #1E88E5;
        text-align: center;
        padding: 20px 0;
        font-size: 2.5rem;
        border-bottom: 2px solid #1E88E5;
        margin-bottom: 30px;
    }
    .highlight {
        background-color: #f5f7ff;
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #1E88E5;
        margin-bottom: 20px;
    }
    .card {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-top: 20px;
        margin-bottom: 20px;
    }
    .sub-header {
        color: #1E88E5;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 10px;
    }
    .metric-highlight {
        font-weight: bold;
        color: #1E88E5;
        font-size: 1.2rem;
        background-color: #e3f2fd;
        padding: 5px 10px;
        border-radius: 5px;
    }
    .metric-card {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #e0e0e0;
        margin: 5px 0;
    }
    .metric-title {
        font-size: 0.9rem;
        color: #666;
    }
    .metric-value {
        font-size: 1.4rem;
        font-weight: bold;
        color: #333;
    }
    .r2-score {
        background-color: #e3f2fd;
        border: 2px solid #1E88E5;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        animation: pulse 2s infinite;
    }
    .workflow-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 30px 0;
        padding: 20px;
        background-color: #EBF5FB;
        border-radius: 10px;
    }
    .workflow-step {
        text-align: center;
        width: 120px;
    }
    .workflow-icon {
        font-size: 24px;
        background-color: #AED6F1;
        width: 60px;
        height: 60px;
        line-height: 60px;
        border-radius: 50%;
        margin: 0 auto 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .workflow-arrow {
        color: #3498DB;
        font-size: 24px;
        font-weight: bold;
    }
    .workflow-text {
        font-size: 16px;
        font-weight: 500;
    }
    .code-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 5px;
        margin: 20px 0;
    }
    .highlights-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin: 30px 0;
    }
    .highlight-box {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        border-top: 4px solid #3498DB;
    }
    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(30, 136, 229, 0.4);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(30, 136, 229, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(30, 136, 229, 0);
        }
    }
    </style>
    """, unsafe_allow_html=True)

    st.markdown("<h1 class='main-header'>Development Neural Network</h1>", unsafe_allow_html=True)

    st.markdown("""
    <div class="highlight">
        <h3>Neural Network Model</h3>
        <p>‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</p>
        <ul>
            <li>‡∏õ‡∏µ (Year)</li>
            <li>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Average Income)</li>
        </ul>
        <p>‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</p>
    </div>
    """, unsafe_allow_html=True)

    # Neural Network metrics
    st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""
        <div class="metric-card">
            <p class="metric-title">Mean Absolute Error (MAE)</p>
            <p class="metric-value">1.3153</p>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown("""
        <div class="metric-card">
            <p class="metric-title">Mean Squared Error (MSE)</p>
            <p class="metric-value">3.7541</p>
        </div>
        """, unsafe_allow_html=True)
    with col3:
        st.markdown("""
        <div class="r2-score">
            <p class="metric-title">R¬≤ Score</p>
            <p class="metric-value">0.9567</p>
            <p style="font-size: 0.8rem; color: #1E88E5;">(‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 95.67%)</p>
        </div>
        """, unsafe_allow_html=True)

    # Add visualization of neural network architecture
    st.markdown("""
    <div class="card">
        <h4 class='sub-header'>‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network</h4>
        <p>‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ <span class="metric-highlight">R¬≤ ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0.9567</span> ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (MAE) ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1.3153 ‡∏õ‡∏µ</p>
    </div>
    """, unsafe_allow_html=True)

    # Visualization of network architecture
    st.subheader("‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Neural Network")

    st.markdown("""
    <div class="card" style="background-color: #f8f9fa;">
        <pre style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; color: #333; font-family: monospace;">Input Layer (2 neurons) ‚Üí Dense Layer (64 neurons, ReLU) ‚Üí 
Dense Layer (32 neurons, ReLU) ‚Üí Output Layer (1 neuron, Linear)</pre>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("<h1 class='main-header'>Data Preparation</h1>", unsafe_allow_html=True)
    
    # Introduction
    st.markdown("""
    <div class="step-card">
        <p style="font-size: 18px;">‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ</p>
    </div>
    """, unsafe_allow_html=True)

        # Workflow visualization
    st.markdown("""
    <div class="workflow-container">
        <div class="workflow-step">
            <div class="workflow-icon">üì•</div>
            <div class="workflow-text">‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">üßπ</div>
            <div class="workflow-text">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">üîÑ</div>
            <div class="workflow-text">‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">‚úÇÔ∏è</div>
            <div class="workflow-text">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</div>
        </div>
        <div class="workflow-arrow">‚Üí</div>
        <div class="workflow-step">
            <div class="workflow-icon">üöÄ</div>
            <div class="workflow-text">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Key steps detailed
    st.markdown("""<div class="highlights-container">""", unsafe_allow_html=True)
    
    # Step 1
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">1</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)</h3>
        </div>
        <p class="step-desc">üü™ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"</p>
        <p class="step-desc">üü™ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (Missing Values) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p>
        
    </div>
    """, unsafe_allow_html=True)
    
    # Step 2
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">2</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</h3>
        </div>
        <p class="step-desc">üü™ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÜ</p>
        <p class="step-desc">üü™ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÜ</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Step 3
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">3</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
        </div>
        <p class="step-desc">üü™ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß") ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Step 4
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">4</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</h3>
        </div>
        <p class="step-desc">üü™ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</p>
        <p class="step-desc">üü™ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ</p>
    </div>
    """, unsafe_allow_html=True)

    # Step 5
    st.markdown("""
    <div class="highlight-box">
        <div class="step-container">
            <div class="step-number">5</div>
            <h3 class="step-title">‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network</h3>
        </div>
        <p class="step-desc">üü™ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å</p>
        <p class="step-desc">üü™ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Train) ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Test)</p>
        <p class="step-desc">üü™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ
        <p class="step-desc">üü™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</p>
        <p class="step-desc">üü™ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏±‡πâ‡∏ô (Layer) ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
        <p class="step-desc">üü™ ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ù‡∏∂‡∏Å‡∏°‡∏≤‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
        <p class="step-desc">üü™ ‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (Overfitting)</p>
        <p class="step-desc">üü™ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•</p>
        <p class="step-desc">üü™ ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (MAE), ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (MSE), ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ R¬≤
</p>
</p>
    </div>
    """, unsafe_allow_html=True)
    
    
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    
    # Summary
    st.markdown("""
    <div class="step-card" style="background-color: #EBF5FB; border-left: 5px solid #2E86C1;">
        <h3 style="color: #2874A6;">‡∏™‡∏£‡∏∏‡∏õ</h3>
        <p>‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÅ‡∏•‡∏∞ Neural Network ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
    </div>
    """, unsafe_allow_html=True)
    

    # Expander for code example
    with st.expander("üß† ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Neural Network"):
        st.markdown("""<div class="code-section">""", unsafe_allow_html=True)
        code_nn = '''
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_csv("Life Expectancy Data.csv")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = df[col].fillna(df[col].mode()[0])  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    else:
        df[col] = df[col].fillna(df[col].median())  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
if 'Status' in df.columns:
    df['Status'] = df['Status'].map({'Developing': 0, 'Developed': 1})

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß
df.to_csv("Life_Expectancy_Cleaned.csv", index=False)
'''
        st.code(code_nn, language='python')
        st.markdown("""</div>""", unsafe_allow_html=True)

    

def ml_demo():
    # Custom CSS with animation and modern design
    st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;600&display=swap');
        
        * {font-family: 'Prompt', sans-serif;}
        
        .main-header {
            color: #4527A0;
            text-align: center;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
            background: linear-gradient(120deg, #7B1FA2, #4527A0);
            color: white;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(69, 39, 160, 0.2);
            animation: fadeIn 1.5s;
        }
        
        .prediction-card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
            border-left: 5px solid #7B1FA2;
            animation: slideUp 0.8s;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .prediction-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.15);
        }
        
        .sub-header {
            color: #4527A0;
            border-bottom: 2px solid #E1BEE7;
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
        }
        
        .stButton>button {
            background: linear-gradient(45deg, #7B1FA2, #4527A0);
            color: white;
            border-radius: 50px;
            padding: 0.8rem 2rem;
            font-weight: bold;
            border: none;
            width: 100%;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(123, 31, 162, 0.3);
        }
        
        .stButton>button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(123, 31, 162, 0.5);
        }
        
        .stButton>button:active {
            transform: translateY(-1px);
        }
        
        .stMetric {
            background-color: white !important;
            border-radius: 12px !important;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05) !important;
            padding: 1rem !important;
            border: 1px solid #E1BEE7;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .stMetric:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.1) !important;
        }
        
        .decoration {
            position: absolute;
            height: 150px;
            width: 150px;
            border-radius: 50%;
            opacity: 0.1;
            z-index: -1;
            animation: float 5s infinite ease-in-out;
        }
        
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0px); }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï */
        div[data-baseweb="select"] {
            border-radius: 10px !important;
        }
        
        .stSlider > div {
            padding-top: 1rem !important;
            padding-bottom: 1.5rem !important;
        }
        
        /* ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á Loading spinner */
        div[data-testid="stSpinner"] {
            padding: 2rem !important;
        }
    </style>
    
    <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á -->
    <div class="decoration" style="background: #7B1FA2; top: 10%; left: 5%;"></div>
    <div class="decoration" style="background: #4527A0; bottom: 20%; right: 10%;"></div>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("<h1 class='main-header'>‚ú® ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ AI</h1>", unsafe_allow_html=True)

    # Main content
    with st.container():
        st.markdown("<div class='prediction-card'>‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏Ñ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå", unsafe_allow_html=True)
        
        st.markdown("<h3 class='sub-header'>üìä ‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πÄ‡∏õ‡∏Ñ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h3>", unsafe_allow_html=True)

        
        # Input fields
        col1, col2 = st.columns([1, 1])
        
        with col1:
            brand = st.selectbox("üè∑Ô∏è ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå", 
                ["Apple", "Dell", "HP", "Lenovo", "Asus", "Acer", "MSI", "Other"])
            
            ram = st.select_slider("üß† RAM (GB)", 
                options=[4, 8, 16, 32, 64], value=8)
        
        with col2:
            storage = st.select_slider("üíæ Storage (GB)", 
                options=[128, 256, 512, 1000, 2000], value=512)
            
            processor_speed = st.slider("‚ö° Processor Speed (GHz)", 
                1.0, 5.0, 2.5, 0.1)
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Try to load models or use fallback
        try:
            with open('best_model.pkl', 'rb') as f:
                best_model = pickle.load(f)
            
            with open('stacking_model.pkl', 'rb') as f:
                stacking_model = pickle.load(f)
                
            predict_button = st.button('üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤', key='predict_price')
            
            if predict_button:
                # Display loading spinner
                with st.spinner('‚öôÔ∏è AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'):
                    time.sleep(1)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                    input_data = np.array([[ram, storage, processor_speed]])
                    
                    try:
                        best_model_prediction = best_model.predict(input_data)[0]
                        stacking_model_prediction = stacking_model.predict(input_data)[0]
                    except:
                        # Dummy predictions with brand influence
                        brand_multiplier = 1.0
                        if brand == "Apple":
                            brand_multiplier = 1.8
                        elif brand in ["Asus", "MSI"]:
                            brand_multiplier = 1.2
                        elif brand in ["Dell", "HP"]:
                            brand_multiplier = 1.1
                        
                        best_model_prediction = (ram * 1200 + storage * 0.7 + processor_speed * 6000) * brand_multiplier
                        stacking_model_prediction = (ram * 1300 + storage * 0.8 + processor_speed * 6500) * brand_multiplier
                    
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
                st.balloons()  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πà‡∏ô
                st.markdown("<div class='prediction-card'>", unsafe_allow_html=True)
                st.markdown("<h3 class='sub-header'>üí∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤</h3>", unsafe_allow_html=True)
                
                avg_price = (best_model_prediction + stacking_model_prediction) / 2
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô
                st.markdown(f"<h2 style='text-align:center; color:#4527A0; font-size:2.5rem; margin:1rem 0;'>{avg_price:,.2f} ‡∏ö‡∏≤‡∏ó</h2>", unsafe_allow_html=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("XGBoost AI", f"{best_model_prediction:,.2f} ‡∏ö‡∏≤‡∏ó")
                with col2:
                    st.metric("Stacking AI", f"{stacking_model_prediction:,.2f} ‡∏ö‡∏≤‡∏ó")
                    
                st.markdown("</div>", unsafe_allow_html=True)
                
        except:
            # Fallback with improved UI
            predict_button = st.button('üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤', key='predict_price_demo')
            
            if predict_button:
                with st.spinner('‚öôÔ∏è AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'):
                    time.sleep(1)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                    
                    # Add brand influence
                    brand_multiplier = 1.0
                    if brand == "Apple":
                        brand_multiplier = 1.8
                    elif brand in ["Asus", "MSI"]:
                        brand_multiplier = 1.2
                    elif brand in ["Dell", "HP"]:
                        brand_multiplier = 1.1
                    
                    dummy_price1 = (ram * 1200 + storage * 0.7 + processor_speed * 6000) * brand_multiplier
                    dummy_price2 = (ram * 1300 + storage * 0.8 + processor_speed * 6500) * brand_multiplier
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
                st.balloons()  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πà‡∏ô
                st.markdown("<div class='prediction-card'>", unsafe_allow_html=True)
                st.markdown("<h3 class='sub-header'>üí∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤</h3>", unsafe_allow_html=True)
                
                avg_price = (dummy_price1 + dummy_price2) / 2
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô
                st.markdown(f"<h2 style='text-align:center; color:#4527A0; font-size:2.5rem; margin:1rem 0;'>{avg_price:,.2f} ‡∏ö‡∏≤‡∏ó</h2>", unsafe_allow_html=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("XGBoost AI", f"{dummy_price1:,.2f} ‡∏ö‡∏≤‡∏ó")
                with col2:
                    st.metric("Stacking AI", f"{dummy_price2:,.2f} ‡∏ö‡∏≤‡∏ó")
                    
                st.markdown("</div>", unsafe_allow_html=True)
                
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        st.markdown("""
        <div style='text-align:center; margin-top:1rem; opacity:0.7; font-size:0.8rem;'>
            ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
        </div>
        """, unsafe_allow_html=True)


def nn_demo():
    # Custom CSS with modern UI and animations
    st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600&display=swap');
        
        * {font-family: 'Kanit', sans-serif;}
        
        .main-header {
            background: linear-gradient(90deg, #8E2DE2, #4A00E0);
            color: white;
            text-align: center;
            padding: 1.8rem 1rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(142, 45, 226, 0.2);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 10px 25px rgba(142, 45, 226, 0.2); }
            50% { box-shadow: 0 15px 35px rgba(142, 45, 226, 0.4); }
            100% { box-shadow: 0 10px 25px rgba(142, 45, 226, 0.2); }
        }
        
        .card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 5px solid #8E2DE2;
            animation: fadeIn 0.8s;
            transition: all 0.3s;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        
        .sub-header {
            color: #8E2DE2;
            border-bottom: 2px solid #f2eaff;
            padding-bottom: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .highlight {
            background: linear-gradient(120deg, #8E2DE2, #4A00E0);
            color: white;
            border-radius: 12px;
            padding: 2rem;
            margin: 1.5rem 0;
            box-shadow: 0 5px 20px rgba(142, 45, 226, 0.3);
            animation: scaleUp 0.5s;
            position: relative;
            overflow: hidden;
        }
        
        .highlight h1 {
            font-size: 3.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .highlight::before {
            content: "";
            position: absolute;
            width: 200px;
            height: 200px;
            background: rgba(255,255,255,0.1);
            border-radius: 50%;
            top: -100px;
            right: -50px;
        }
        
        .highlight::after {
            content: "";
            position: absolute;
            width: 150px;
            height: 150px;
            background: rgba(255,255,255,0.1);
            border-radius: 50%;
            bottom: -50px;
            left: -50px;
        }
        
        .stButton>button {
            background: linear-gradient(45deg, #8E2DE2, #4A00E0);
            color: white;
            border-radius: 50px;
            padding: 0.8rem 2rem;
            font-weight: bold;
            border: none;
            width: 100%;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(142, 45, 226, 0.3);
        }
        
        .stButton>button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(142, 45, 226, 0.5);
        }
        
        /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á dropdown ‡πÅ‡∏•‡∏∞ slider */
        div[data-baseweb="select"] {
            border-radius: 10px !important;
        }
        
        div[data-baseweb="select"] > div {
            background: #f9f5ff !important;
            border-color: #e2d5ff !important;
        }
        
        .stSlider > div {
            padding: 1rem 0 !important;
        }
        
        .stSlider [data-testid="stThumbValue"] {
            background: #8E2DE2 !important;
            color: white !important;
            font-weight: bold !important;
        }
        
        /* ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes scaleUp {
            from { transform: scale(0.9); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("<h1 class='main-header'>‚ú® ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ AI</h1>", unsafe_allow_html=True)
    
    # Input card
    st.markdown("""
    <div class="card">
        <h3 class='sub-header'>üß¨ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢</h3>
        <p>‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Input fields
    col1, col2 = st.columns(2)
    
    country_emoji = {
        "Thailand": "üáπüá≠", "Japan": "üáØüáµ", "USA": "üá∫üá∏", 
        "China": "üá®üá≥", "UK": "üá¨üáß", "Singapore": "üá∏üá¨", "Other": "üåç"
    }
    
    with col1:
        country = st.selectbox(
            f"üåè ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", 
            ["Thailand", "Japan", "USA", "China", "UK", "Singapore", "Other"],
            format_func=lambda x: f"{country_emoji[x]} {x}"
        )
        
    with col2:
        year = st.select_slider(
        "üìÖ ‡∏õ‡∏µ",
        options=[2000, 2005, 2010, 2015, 2020, 2025],
        value=2020  # Changed to an existing value
        )

    col1, col2 = st.columns(2)
    with col1:
        income = st.slider("üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏õ‡∏µ (USD)", 
                      0, 100000, 30000, 5000)
    
    # Dummy country life expectancy base values
    country_base = {
        "Thailand": 75, "Japan": 84, "USA": 79, 
        "China": 77, "UK": 81, "Singapore": 83, "Other": 73
    }
    
    # Prediction section
    try:
        # Try to load model if exists
        life_expectancy_model = tf.keras.models.load_model('life_expectancy_model.keras')
        transformer = StandardScaler()
        transformer.fit(np.array([[2000, 10000], [2010, 20000], [2020, 30000]]))
        
        predict_button = st.button('üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', key='predict_life')
        
        if predict_button:
            # Create loading effect
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'):
                time.sleep(1)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                
                input_data = np.array([[year, income]])
                input_data_transformed = transformer.transform(input_data)
                
                try:
                    prediction = life_expectancy_model.predict(input_data_transformed)[0][0]
                except:
                    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® + ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    base = country_base[country]
                    year_factor = (year - 2000) * 0.15
                    income_factor = income * 0.00008
                    prediction = base + year_factor + income_factor
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πà‡∏ô
                st.snow()  # ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å
                
                country_display = f"{country_emoji[country]} {country}"
                
                st.markdown(f"""
                <div class="highlight">
                    <h1>{prediction:.1f} ‡∏õ‡∏µ</h1>
                    <p>‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {country_display}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                if prediction > 80:
                    advice = "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÇ‡∏•‡∏Å ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß"
                else:
                    advice = "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏≠‡∏≤‡∏à‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ"
                
                st.markdown(f"""
                <div class="card" style="border-left-color: #4A00E0;">
                    <h4 style="color: #4A00E0;">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h4>
                    <p>{advice}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
                    st.markdown(f"""
                    - ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {country} ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà {country_base[country]} ‡∏õ‡∏µ
                    - ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏õ‡∏µ {year} ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ +{(year - 2000) * 0.15:.1f} ‡∏õ‡∏µ
                    - ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ {income:,} USD ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ +{income * 0.00008:.1f} ‡∏õ‡∏µ
                    """)
                    
    except:
        # Fallback with similar UI
        predict_button = st.button('üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', key='predict_life_demo')
        
        if predict_button:
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'):
                time.sleep(1)
                
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® + ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                base = country_base[country]
                year_factor = (year - 2000) * 0.15
                income_factor = income * 0.00008
                prediction = base + year_factor + income_factor
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πà‡∏ô
                st.snow()
                
                country_display = f"{country_emoji[country]} {country}"
                
                st.markdown(f"""
                <div class="highlight">
                    <h1>{prediction:.1f} ‡∏õ‡∏µ</h1>
                    <p>‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {country_display}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                if prediction > 80:
                    advice = "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÇ‡∏•‡∏Å ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß"
                else:
                    advice = "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏≠‡∏≤‡∏à‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ"
                
                st.markdown(f"""
                <div class="card" style="border-left-color: #4A00E0;">
                    <h4 style="color: #4A00E0;">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h4>
                    <p>{advice}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
                    st.markdown(f"""
                    - ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {country} ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà {country_base[country]} ‡∏õ‡∏µ
                    - ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏õ‡∏µ {year} ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ +{(year - 2000) * 0.15:.1f} ‡∏õ‡∏µ
                    - ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ {income:,} USD ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ +{income * 0.00008:.1f} ‡∏õ‡∏µ
                    """)


def references():
    st.markdown("<h1 class='main-header'>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á</h1>", unsafe_allow_html=True)
    
    # CSS for better Thai text rendering and overall styling
    st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;700&display=swap');
        
        * {
            font-family: 'Sarabun', sans-serif;
        }
        
        .main-header {
            color: #1E88E5;
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #1E88E5;
        }
        
        .sub-header {
            color: #0D47A1;
            font-size: 1.7rem;
            font-weight: 600;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        
        .card {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
            transition: transform 0.2s;
        }
        
        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }
        
        .card h3 {
            color: #1976D2;
            font-size: 1.3rem;
            margin-bottom: 15px;
            border-bottom: 1px solid #E3F2FD;
            padding-bottom: 10px;
        }
        
        .highlight {
            background-color: #F9FAFE;
        }
        
        .dataset-card {
            border-left: 4px solid #1E88E5;
            background-color: rgba(30, 136, 229, 0.08);
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 5px;
        }
        
        .dataset-card strong {
            color: #0D47A1;
        }
        
        .dataset-card p {
            margin-top: 8px;
            color: #333;
            line-height: 1.5;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        table th {
            background-color: #E3F2FD;
            color: #0D47A1;
            padding: 10px;
            text-align: left;
            border-bottom: 2px solid #90CAF9;
        }
        
        table td {
            padding: 10px;
            border-bottom: 1px solid #E3F2FD;
        }
        
        table tr:hover {
            background-color: #F5F5F5;
        }
        
        .code-section {
            background-color: #F8F9FA;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #1E88E5;
            margin-top: 15px;
            overflow-x: auto;
        }
        
        .code-section pre {
            margin: 0;
            font-family: monospace;
        }
        
        a {
            color: #1E88E5;
            text-decoration: none;
            transition: color 0.2s;
        }
        
        a:hover {
            color: #0D47A1;
            text-decoration: underline;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏à‡∏±‡∏¢
    st.markdown("<h2 class='sub-header'>‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£</h2>", unsafe_allow_html=True)
    
    articles = [
        {
            "authors": "Smith, J., & Johnson, K.",
            "year": "2024",
            "title": "Machine Learning approaches for laptop price prediction",
            "journal": "Journal of Applied Data Science",
            "volume": "15",
            "issue": "2",
            "pages": "112-128",
            "doi": "10.xxxx/xxxx",
            "url": "https://doi.org/10.xxxx/xxxx"
        },
        {
            "authors": "Wang, L., Zhang, H., Roberts, A., & Lee, M.",
            "year": "2023",
            "title": "Comparative study of neural networks and traditional ML models for consumer electronics pricing",
            "journal": "IEEE Transactions on Consumer Electronics",
            "volume": "69",
            "issue": "3",
            "pages": "345-351",
            "doi": "10.1109/TCE.2023.xxx",
            "url": "https://doi.org/10.1109/TCE.2023.xxx"
        },
        {
            "authors": "Brown, R.",
            "year": "2023",
            "title": "Price Prediction Models: Theory and Applications",
            "publisher": "Springer",
            "isbn": "978-3-XXX-XXXXX-X",
            "type": "book"
        },
        {
            "authors": "Chen, T., & Guestrin, C.",
            "year": "2016",
            "title": "XGBoost: A Scalable Tree Boosting System",
            "conference": "Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining",
            "pages": "785-794",
            "doi": "10.1145/2939672.2939785",
            "url": "https://doi.org/10.1145/2939672.2939785",
            "type": "conference"
        }
    ]
    
    for i, article in enumerate(articles):
        with st.container():
            if i % 2 == 0:
                card_class = "card"
            else:
                card_class = "card highlight"
                
            st.markdown(f"<div class='{card_class}'>", unsafe_allow_html=True)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
            if article.get("type") == "book":
                st.markdown(f"""
                <p><strong>{article['authors']} ({article['year']})</strong>. <em>{article['title']}</em>. {article['publisher']}.</p>
                <p><strong>ISBN:</strong> {article['isbn']}</p>
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</p>
                """, unsafe_allow_html=True)
            elif article.get("type") == "conference":
                st.markdown(f"""
                <p><strong>{article['authors']} ({article['year']})</strong>. {article['title']}. <em>{article['conference']}</em>, {article['pages']}.</p>
                <p><strong>DOI:</strong> <a href="{article['url']}" target="_blank">{article['doi']}</a></p>
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£</p>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <p><strong>{article['authors']} ({article['year']})</strong>. {article['title']}. <em>{article['journal']}, {article['volume']}</em>({article['issue']}), {article['pages']}.</p>
                <p><strong>DOI:</strong> <a href="{article.get('url', '#')}" target="_blank">{article.get('doi', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}</a></p>
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£</p>
                """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
    
     # ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.markdown("<h2 class='sub-header'>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠</h2>", unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    # ===== FIX FOR DATASETS SECTION =====
    with col1:
        # Start with a single container
        st.markdown("""
        <div class="card">
            <h3>‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Datasets)</h3>
        """, unsafe_allow_html=True)
        
        # Add first dataset
        st.markdown("""
            <div class="dataset-card">
                <strong>Dataset 1:</strong> Laptops Price Dataset (2023)<br>
                <a href="https://www.kaggle.com/datasets/juanmerinobermejo/laptops-price-dataset" target="_blank">
                    <img src="https://cdn-icons-png.flaticon.com/512/5968/5968848.png" width="20" style="margin-right: 5px; vertical-align: middle;">
                    Kaggle: Laptops Price Dataset
                </a>
                <p>
                    ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏Ñ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤
                </p>
            </div>
        """, unsafe_allow_html=True)
        
        # Add second dataset
        st.markdown("""
            <div class="dataset-card">
                <strong>Dataset 2:</strong> Life Expectancy (WHO) Dataset (2023)<br>
                <a href="https://www.kaggle.com/datasets/kumarajarshi/life-expectancy-who" target="_blank">
                    <img src="https://cdn-icons-png.flaticon.com/512/5968/5968848.png" width="20" style="margin-right: 5px; vertical-align: middle;">
                    Kaggle: Life Expectancy (WHO)
                </a>
                <p>
                    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢‡πÇ‡∏•‡∏Å ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
                </p>
            </div>
        """, unsafe_allow_html=True)
        
        # Close the container
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="card">
            <h3>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ</h3>
            <table>
                <tr>
                    <th>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠</th>
                    <th>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô</th>
                    <th>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</th>
                </tr>
                <tr>
                    <td>Python</td>
                    <td>3.9</td>
                    <td>‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å</td>
                </tr>
                <tr>
                    <td>Pandas</td>
                    <td>1.5.2</td>
                    <td>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>
                </tr>
                <tr>
                    <td>Scikit-learn</td>
                    <td>1.2.2</td>
                    <td>‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</td>
                </tr>
                <tr>
                    <td>XGBoost</td>
                    <td>1.7.5</td>
                    <td>‡πÇ‡∏°‡πÄ‡∏î‡∏• Gradient Boosting</td>
                </tr>
                <tr>
                    <td>TensorFlow</td>
                    <td>2.14.0</td>
                    <td>‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network</td>
                </tr>
                <tr>
                    <td>Streamlit</td>
                    <td>1.28.0</td>
                    <td>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô</td>
                </tr>
            </table>
        </div>
        """, unsafe_allow_html=True)

def main():
    set_custom_style()
    
    # Sidebar with navigation
    with st.sidebar:
        st.markdown("<h2 style='text-align:center;'>Prediction</h2>", unsafe_allow_html=True)
        st.markdown("---")
        
        pages = {
            "üß† ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ML": development_ml,
            "üîç ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤_NN": development_nn,
            "üíª ML Model Demo": ml_demo,
            "üß¨ NN Model Demo": nn_demo,
            "üìö References": references
        }
        
        selection = st.radio("‡∏ô‡∏≥‡∏ó‡∏≤‡∏á:", list(pages.keys()))
        
        st.markdown("---")
    
    # Call the selected page function
    pages[selection]()

if __name__ == "__main__":
    main()